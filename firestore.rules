rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ================================
    // TEMPORARY SETUP RULES - RELAXED FOR DEMO DATA POPULATION
    // REVERT TO SECURE RULES AFTER SETUP IS COMPLETE
    // ================================
    
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Check if authenticated user has specific role
    function hasRole(role) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    // Check if user is vendor
    function isVendor() {
      return hasRole('vendor');
    }
    
    // Check if user is supplier
    function isSupplier() {
      return hasRole('supplier');
    }
    
    // ================================
    // IMMUTABILITY & SECURITY
    // ================================
    
    // Ensure user role cannot be changed once set
    function roleIsImmutable() {
      return request.resource.data.role == resource.data.role;
    }
    
    // Ensure critical fields are immutable
    function criticalFieldsImmutable() {
      return (!('uid' in request.resource.data) || request.resource.data.uid == resource.data.uid) &&
             (!('phoneNumber' in request.resource.data) || request.resource.data.phoneNumber == resource.data.phoneNumber) &&
             (!('createdAt' in request.resource.data) || request.resource.data.createdAt == resource.data.createdAt);
    }
    
    // Validate current timestamp
    function isValidTimestamp(ts) {
      return ts == request.time;
    }
    
    // ================================
    // INPUT VALIDATION
    // ================================
    
    // Validate input string - prevent XSS and injection
    function isValidString(value, minLen, maxLen) {
      return value is string && value.size() >= minLen && value.size() <= maxLen &&
             value.matches('^[^"\\\\<>]*$'); // Prevent basic XSS
    }
    
    // Validate price
    function isValidPrice(price) {
      return price is number && price >= 0.01 && price <= 999999.99;
    }
    
    // Validate quantity
    function isValidQuantity(quantity) {
      return quantity is number && quantity >= 0 && quantity <= 999999;
    }
    
    // Validate phone number format (India) - more flexible for Firebase Auth
    function isValidPhoneNumber(phone) {
      return phone is string && (
        phone.matches('^\\+91[6-9][0-9]{9}$') || // Full format
        phone.matches('^[6-9][0-9]{9}$') // Without country code
      );
    }
    
    // Validate email
    function isValidEmail(email) {
      return email is string && email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }
    
    // ================================
    // GROUP ORDER HELPERS
    // ================================
    
    // Check if user is a member of the group order
    function isGroupOrderMember(groupOrderId) {
      return isVendor() && 
        request.auth.uid in get(/databases/$(database)/documents/groupOrders/$(groupOrderId)).data.memberIDs;
    }
    
    // Check if user is the leader of the group order
    function isGroupOrderLeader(groupOrderId) {
      return isVendor() && 
        request.auth.uid == get(/databases/$(database)/documents/groupOrders/$(groupOrderId)).data.leaderID;
    }
    
    // ================================
    // DATA STRUCTURE VALIDATION
    // ================================
    
    // Validate user data structure for creation
    function isValidUserData() {
      let data = request.resource.data;
      return data.keys().hasAll(['name', 'role', 'uid']) &&
        data.keys().hasOnly(['name', 'phoneNumber', 'role', 'language', 'uid', 'createdAt', 'businessName', 'address', 'profilePicture', 'isProfileComplete', 'updatedAt', 'onboardingStatus', 'isRisingStar', 'avatarUrl']) &&
        data.role in ['vendor', 'supplier'] &&
        (!('language' in data) || data.language in ['en', 'hi', 'mr']) &&
        isValidString(data.name, 2, 100) &&
        // Phone number validation - allow null/undefined or valid format
        (!('phoneNumber' in data) || data.phoneNumber == null || isValidPhoneNumber(data.phoneNumber)) &&
        data.uid == request.auth.uid &&
        // For creation, createdAt should be present (serverTimestamp is allowed)
        ('createdAt' in data) &&
        (!('businessName' in data) || data.businessName == null || isValidString(data.businessName, 2, 200)) &&
        (!('address' in data) || data.address == null || isValidString(data.address, 5, 500)) &&
        (!('isProfileComplete' in data) || data.isProfileComplete is bool) &&
        (!('onboardingStatus' in data) || data.onboardingStatus is map) &&
        (!('isRisingStar' in data) || data.isRisingStar is bool) &&
        (!('avatarUrl' in data) || data.avatarUrl == null || data.avatarUrl is string) &&
        (!('profilePicture' in data) || data.profilePicture == null || data.profilePicture is string);
    }
    
    // Validate product data structure
    function isValidProductData() {
      let data = request.resource.data;
      return data.keys().hasAll(['name', 'category', 'price', 'unit', 'availableQuantity', 'supplierId', 'isActive', 'createdAt']) &&
        data.keys().hasOnly(['name', 'category', 'price', 'unit', 'availableQuantity', 'supplierId', 'isActive', 'createdAt', 'description', 'qualityCertificate', 'updatedAt', 'minOrderQuantity', 'maxOrderQuantity']) &&
        isValidString(data.name, 2, 200) &&
        data.category in ['vegetables', 'fruits', 'grains', 'dairy', 'spices', 'oils', 'beverages', 'other'] &&
        isValidPrice(data.price) &&
        data.unit in ['kg', 'g', 'l', 'ml', 'piece', 'dozen', 'packet', 'bunch', 'bag'] &&
        isValidQuantity(data.availableQuantity) &&
        data.supplierId == request.auth.uid &&
        data.isActive is bool &&
        data.createdAt == request.time &&
        (!('description' in data) || isValidString(data.description, 0, 1000)) &&
        (!('qualityCertificate' in data) || isValidString(data.qualityCertificate, 0, 200)) &&
        (!('minOrderQuantity' in data) || isValidQuantity(data.minOrderQuantity)) &&
        (!('maxOrderQuantity' in data) || isValidQuantity(data.maxOrderQuantity));
    }
    
    // Validate order item structure
    function isValidOrderItem(item) {
      return item.keys().hasAll(['productId', 'productName', 'supplierId', 'quantity', 'price', 'unit']) &&
        item.keys().hasOnly(['productId', 'productName', 'supplierId', 'quantity', 'price', 'unit', 'supplierName']) &&
        item.productId is string && item.productId.size() > 0 &&
        isValidString(item.productName, 1, 200) &&
        item.supplierId is string && item.supplierId.size() > 0 &&
        isValidQuantity(item.quantity) && item.quantity > 0 &&
        isValidPrice(item.price) &&
        item.unit is string && item.unit.size() > 0;
    }
    
    // Validate order data structure
    function isValidOrderData() {
      let data = request.resource.data;
      return data.keys().hasAll(['vendorId', 'supplierId', 'items', 'totalAmount', 'status', 'paymentStatus', 'createdAt']) &&
        data.keys().hasOnly(['vendorId', 'supplierId', 'items', 'totalAmount', 'status', 'paymentStatus', 'createdAt', 'updatedAt', 'vendorName', 'deliveryAddress', 'specialInstructions']) &&
        data.vendorId == request.auth.uid &&
        data.supplierId is string && data.supplierId.size() > 0 &&
        data.items is list && data.items.size() > 0 && data.items.size() <= 50 &&
        isValidPrice(data.totalAmount) &&
        data.status == 'pending' &&
        data.paymentStatus in ['pending', 'paid', 'failed'] &&
        data.createdAt == request.time &&
        (!('deliveryAddress' in data) || isValidString(data.deliveryAddress, 10, 500)) &&
        (!('specialInstructions' in data) || isValidString(data.specialInstructions, 0, 500));
    }
    
    // Validate rating data structure
    function isValidRatingData() {
      let data = request.resource.data;
      return data.keys().hasAll(['raterId', 'ratedId', 'rating', 'createdAt']) &&
        data.keys().hasOnly(['raterId', 'ratedId', 'rating', 'createdAt', 'comment', 'orderId']) &&
        data.raterId == request.auth.uid &&
        data.ratedId is string && data.ratedId.size() > 0 &&
        data.rating is number && data.rating >= 1 && data.rating <= 5 &&
        data.createdAt == request.time &&
        (!('comment' in data) || isValidString(data.comment, 0, 500)) &&
        (!('orderId' in data) || (data.orderId is string && data.orderId.size() > 0));
    }
    
    // ================================
    // COLLECTION RULES
    // ================================
    
    // Users collection - Profile management
    match /users/{userId} {
      // Read: Authenticated users can read user profiles (for supplier/vendor names)
      allow read: if isAuthenticated();
      
      // Create: Users can only create their own profile during signup
      allow create: if isOwner(userId) && isValidUserData();
      
      // Update: Users can update their profile but role, uid, phone, and createdAt are immutable
allow update: if isOwner(userId) && 
        roleIsImmutable() &&
        criticalFieldsImmutable() &&
        (request.resource.data.updatedAt == request.time || request.resource.data.updatedAt == null);
      
      // Delete: Profiles cannot be deleted (data retention)
      allow delete: if false;
    }
    
    // Products collection - Inventory management
    match /products/{productId} {
      // Read: All authenticated users can read products (vendors need to browse)
      allow read: if isAuthenticated();
      
      // Create: Only suppliers can create products with valid data
      allow create: if isSupplier() && isValidProductData();
      
      // Update: Suppliers can only update their own products
      allow update: if isSupplier() && 
        resource.data.supplierId == request.auth.uid &&
        request.resource.data.supplierId == request.auth.uid &&
        request.resource.data.createdAt == resource.data.createdAt &&
        request.resource.data.updatedAt == request.time;
      
      // Delete: Suppliers can only delete their own products
      allow delete: if isSupplier() && resource.data.supplierId == request.auth.uid;
    }
    
    // Orders collection - Transaction management
    match /orders/{orderId} {
      // Read: Vendors can read their orders; suppliers can read orders for their products
      allow read: if isAuthenticated() && (
        (isVendor() && resource.data.vendorId == request.auth.uid) ||
        (isSupplier() && resource.data.supplierId == request.auth.uid)
      );
      
      // Create: Only vendors can create orders with valid data
      allow create: if isVendor() && isValidOrderData();
      
      // Update: Limited updates based on role and order status
      allow update: if isAuthenticated() && (
        // Vendors can cancel pending orders
        (isVendor() && 
          resource.data.vendorId == request.auth.uid && 
          resource.data.status == 'pending' &&
          request.resource.data.status == 'cancelled' &&
          request.resource.data.updatedAt == request.time &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt'])) ||
        // Suppliers can update status of their orders
        (isSupplier() && 
          resource.data.supplierId == request.auth.uid &&
          request.resource.data.status in ['pending', 'processing', 'completed', 'cancelled'] &&
          request.resource.data.updatedAt == request.time &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt']))
      );
      
      // Delete: Orders cannot be deleted (audit trail)
      allow delete: if false;
    }
    
    // Group Orders collection - Collaborative purchasing
    match /groupOrders/{groupOrderId} {
      // Read: All vendors can see open group orders; members can see their group orders
      allow read: if isVendor() && (
        resource.data.status == 'open' ||
        request.auth.uid in resource.data.memberIDs
      );
      
      // Create: Only vendors can create group orders
      allow create: if isVendor() && 
        request.resource.data.leaderID == request.auth.uid &&
        request.resource.data.status == 'open' &&
        request.resource.data.memberIDs == [request.auth.uid] &&
        request.resource.data.createdAt == request.time &&
        request.resource.data.updatedAt == request.time &&
        request.resource.data.deadline > request.time;
      
      // Update: Complex rules for different scenarios
      allow update: if isVendor() && (
        // Leader can update most fields while group order is open
        (resource.data.leaderID == request.auth.uid && 
         resource.data.status == 'open' &&
         request.resource.data.leaderID == resource.data.leaderID &&
         request.resource.data.createdAt == resource.data.createdAt &&
         request.resource.data.updatedAt == request.time) ||
        // Members can update their contributions
        (request.auth.uid in resource.data.memberIDs &&
         resource.data.status == 'open' &&
         request.resource.data.updatedAt == request.time &&
         // Only allow updating product quantities for the authenticated user
         request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['products', 'updatedAt', 'totalValue', 'currentDiscount']))
      );
      
      // Delete: Only leader can delete their own group orders if no other members
      allow delete: if isGroupOrderLeader(groupOrderId) && 
        resource.data.memberIDs.size() == 1;
      
      // Activities subcollection
      match /activities/{activityId} {
        // Read: Members can read activities
        allow read: if isGroupOrderMember(groupOrderId);
        
        // Create: Members can create activities
        allow create: if isGroupOrderMember(groupOrderId) &&
          request.resource.data.userId == request.auth.uid &&
          request.resource.data.timestamp == request.time;
        
        // Update/Delete: Activities are immutable
        allow update, delete: if false;
      }
    }
    
    // Group Order Invitations collection
    match /groupOrderInvitations/{invitationId} {
      // Read: Users can read invitations sent to them or by them
      allow read: if isVendor() && (
        resource.data.toUserId == request.auth.uid ||
        resource.data.fromUserId == request.auth.uid
      );
      
      // Create: Group order members can create invitations
      allow create: if isVendor() &&
        request.resource.data.fromUserId == request.auth.uid &&
        request.resource.data.status == 'pending' &&
        request.resource.data.createdAt == request.time &&
        exists(/databases/$(database)/documents/groupOrders/$(request.resource.data.groupOrderId)) &&
        request.auth.uid in get(/databases/$(database)/documents/groupOrders/$(request.resource.data.groupOrderId)).data.memberIDs;
      
      // Update: Invitees can accept/reject invitations
      allow update: if isVendor() &&
        resource.data.toUserId == request.auth.uid &&
        resource.data.status == 'pending' &&
        request.resource.data.status in ['accepted', 'rejected'] &&
        request.resource.data.respondedAt == request.time &&
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['status', 'respondedAt']);
      
      // Delete: Senders can delete pending invitations
      allow delete: if isVendor() &&
        resource.data.fromUserId == request.auth.uid &&
        resource.data.status == 'pending';
    }
    
    // ================================
    // WALLET, TRANSACTIONS, ESCROW
    // ================================

    // Wallet for a user
    match /wallets/{userId} {
      // Users can read/update their own wallet
      allow read, update: if isOwner(userId);
      // Users can create their own wallet
      allow create: if isOwner(userId) && (isVendor() || isSupplier());
    }

    // Transactions for a user
    match /transactions/{transactionId} {
      // Users can read their own transactions
      allow read: if isOwner(resource.data.userId);
      // Users can create transactions for themselves
      allow create: if isOwner(request.resource.data.userId);
    }

    // Escrow records for a user
    match /escrow/{escrowId} {
       // Users can read their own escrow records
      allow read: if isOwner(resource.data.userId);
      // Users can create escrow records for themselves
      allow create: if isOwner(request.resource.data.userId);
    }

    // Ratings collection
    match /ratings/{ratingId} {
      // Read: Authenticated users can read ratings
      allow read: if isAuthenticated();

      // Create: Authenticated users can create ratings
      allow create: if isAuthenticated() && isValidRatingData();

      // Update/Delete: Ratings are immutable
      allow update, delete: if false;
    }

    // ================================
    // FALLBACK DENY ALL
    // ================================
    
    // Deny access to any other collections or documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
